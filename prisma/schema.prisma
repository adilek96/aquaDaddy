datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum AquariumType {
    FRESHWATER
    SALTWATER
    PALUDARIUM
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    aquariums Aquarium[]
    ratings   Rating[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    provider          String
    providerAccountId String
    userId            String
    type              String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Aquarium {
    id           String       @id @default(cuid())
    userId       String
    user         User         @relation(fields: [userId], references: [id])
    name         String
    description  String?
    type         AquariumType
    shape        String
    lengthCm     Float?
    widthCm      Float?
    heightCm     Float?
    volumeLiters Float?
    startDate    DateTime?
    isPublic     Boolean      @default(false)

    // Дополнительные поля для разных форм аквариума
    diameterCm Float?
    sideCm     Float?
    depthCm    Float?
    k          Float?

    waterParams WaterParameters?
    inhabitants Inhabitant[]
    maintenance Maintenance[]
    reminders   Reminder[]
    images      AquariumImage[]
    waterLogs   WaterLog[]
    ratings     Rating[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model WaterParameters {
    id           String   @id @default(cuid())
    aquariumId   String   @unique
    aquarium     Aquarium @relation(fields: [aquariumId], references: [id])
    pH           Float?
    temperatureC Float?
    KH           Float?
    GH           Float?
    NH3          Float?
    NH4          Float?
    NO2          Float?
    NO3          Float?
    PO4          Float?
    K            Float?
    Fe           Float?
    Mg           Float?
    Ca           Float?
    salinity     Float?
    lastUpdated  DateTime @default(now())
}

model Inhabitant {
    id         String   @id @default(cuid())
    aquariumId String
    aquarium   Aquarium @relation(fields: [aquariumId], references: [id])
    species    String
    count      Int
    addedAt    DateTime @default(now())
}

model Maintenance {
    id          String   @id @default(cuid())
    aquariumId  String
    aquarium    Aquarium @relation(fields: [aquariumId], references: [id])
    performedAt DateTime
    description String
}

model Reminder {
    id          String   @id @default(cuid())
    aquariumId  String
    aquarium    Aquarium @relation(fields: [aquariumId], references: [id])
    title       String
    remindAt    DateTime
    isCompleted Boolean  @default(false)
}

model AquariumImage {
    id         String   @id @default(cuid())
    aquariumId String
    aquarium   Aquarium @relation(fields: [aquariumId], references: [id])
    url        String
    uploadedAt DateTime @default(now())
}

model WaterLog {
    id           String   @id @default(cuid())
    aquariumId   String
    aquarium     Aquarium @relation(fields: [aquariumId], references: [id])
    recordedAt   DateTime
    pH           Float?
    temperatureC Float?
    KH           Float?
    GH           Float?
    NH3          Float?
    NH4          Float?
    NO2          Float?
    NO3          Float?
    PO4          Float?
    K            Float?
    Fe           Float?
    Mg           Float?
    Ca           Float?
    salinity     Float?
}

model Rating {
    id         String   @id @default(cuid())
    userId     String
    aquariumId String
    user       User     @relation(fields: [userId], references: [id])
    aquarium   Aquarium @relation(fields: [aquariumId], references: [id])
    value      Int
    createdAt  DateTime @default(now())

    @@unique([userId, aquariumId])
}
